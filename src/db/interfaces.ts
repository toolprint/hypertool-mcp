/**
 * Database interfaces for server and group management
 * These interfaces provide abstraction over the underlying database implementation
 */

import { ServerConfig } from '../types/config.js';

/**
 * Represents a canonical, internally managed MCP server configuration record.
 * Stored in the 'servers' collection.
 */
export interface ServerConfigRecord {
  id: string; // Unique ID generated by the DB layer (e.g., UUID)
  name: string; // User-defined name from mcp.json
  type: 'stdio' | 'http' | 'sse';
  config: ServerConfig; // The actual server configuration object
  lastModified: number; // Unix timestamp
  checksum: string; // Checksum of the config for change detection
}

/**
 * Represents a named, user-defined collection of ServerConfigRecord IDs.
 * Stored in the 'groups' collection.
 */
export interface ServerConfigGroup {
  id: string; // Unique ID generated by the DB layer
  name: string; // User-defined group name (unique)
  description?: string; // Optional description
  serverIds: string[]; // Array of ServerConfigRecord.id strings
}

/**
 * Interface for interacting with ServerConfigRecord data.
 */
export interface IServerConfigRecordRepository {
  add(server: Omit<ServerConfigRecord, 'id'>): Promise<ServerConfigRecord>;
  update(server: ServerConfigRecord): Promise<ServerConfigRecord | null>;
  delete(id: string): Promise<boolean>;
  findById(id: string): Promise<ServerConfigRecord | null>;
  findByName(name: string): Promise<ServerConfigRecord | null>;
  findAll(): Promise<ServerConfigRecord[]>;
  // Additional query methods can be added as needed (e.g., findByType)
}

/**
 * Interface for interacting with ServerConfigGroup data.
 */
export interface IServerConfigGroupRepository {
  add(group: Omit<ServerConfigGroup, 'id'>): Promise<ServerConfigGroup>;
  update(group: ServerConfigGroup): Promise<ServerConfigGroup | null>;
  delete(id: string): Promise<boolean>;
  findById(id: string): Promise<ServerConfigGroup | null>;
  findByName(name: string): Promise<ServerConfigGroup | null>;
  findAll(): Promise<ServerConfigGroup[]>;
  /**
   * Retrieves all ServerConfigRecord objects that are members of a specific group.
   * This method will internally query the IServerConfigRecordRepository.
   */
  findServersInGroup(groupId: string): Promise<ServerConfigRecord[]>;
  // Additional query methods can be added as needed
}

/**
 * Central service interface for managing the database and providing access to repositories.
 */
export interface IDatabaseService {
  servers: IServerConfigRecordRepository;
  groups: IServerConfigGroupRepository;
  init(): Promise<void>; // Initializes the database (loads data, sets up indexes)
  close(): Promise<void>; // Closes the database connection (flushes data to disk)
}