# Task ID: 27
# Title: Implement Dynamic Tool Registration System
# Status: in-progress
# Dependencies: 16, 17, 18, 19
# Priority: high
# Description: Replace static toolset filtering with dynamic tool registration/unregistration system that registers tools with flattened names and sends MCP change notifications when toolsets are equipped or unequipped [Updated: 7/14/2025]
# Details:
Create a dynamic tool registration system replacing the current getAvailableTools() filtering approach. Implement tool registration with name flattening (git.search â†’ git_search) while preserving exact schemas from underlying servers. When toolsets are equipped: 1) Register tools dynamically with the MCP server using flattened names, 2) Send MCP tool change notifications to connected clients, 3) Maintain mapping between flattened names and original server/tool pairs for routing. When toolsets are unequipped: 1) Unregister tools from the MCP server, 2) Send removal notifications to clients, 3) Clean up routing mappings. Preserve the two-layer architecture specified in PRD with tool discovery remaining separate from dynamic registration. Implement transparent proxying ensuring requests to flattened tool names are correctly routed to underlying servers with original names. Handle edge cases: 1) Name conflicts between servers (use server prefixing as fallback), 2) Tools becoming unavailable while registered, 3) Client connections during registration changes, 4) Partial registration failures. Create ToolRegistrationManager class with methods: registerToolset(toolsetId, tools), unregisterToolset(toolsetId), handleToolCall(flattenedName, params). Integrate with existing ToolsetManager for equipped/unequipped events. Ensure atomic registration operations and rollback on failures.
<info added on 2025-07-14T15:43:43.331Z>
Based on the user request "Assigned to claude-squad session-1721000000", the new text that should be appended to the task's details is:

Assigned to claude-squad session-1721000000
</info added on 2025-07-14T15:43:43.331Z>

# Test Strategy:
Unit tests for name flattening logic and conflict resolution. Integration tests for registration/unregistration flows with mock MCP clients verifying change notifications. Test transparent proxying with various tool call scenarios. Simulate edge cases: server disconnections during registration, conflicting tool names, rapid equip/unequip cycles. Verify rollback behavior on partial failures. Performance tests for registration with large toolsets. Test MCP protocol compliance for tool change notifications.
