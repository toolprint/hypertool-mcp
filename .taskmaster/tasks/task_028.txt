# Task ID: 28
# Title: Replace current logging system with Pino logger
# Status: pending
# Dependencies: 13, 14, 15, 16, 17, 18, 19, 20, 21, 23
# Priority: medium
# Description: Implement Pino as the primary logging system throughout the codebase, replacing all console.log/warn/error calls with structured logging that supports both stdio and HTTP transport modes
# Details:
1. **Install and Configure Pino**: Add Pino and necessary dependencies (@types/pino, pino-pretty for development). Create logger configuration module at src/logger/index.ts with TypeScript interfaces for logger options.

2. **Logger Initialization**: Implement logger factory that creates Pino instances with proper configuration including log levels (trace, debug, info, warn, error, fatal), structured output format, and transport-specific settings. Configure file logging to write to {config_dir}/{app_name}.mcp_{timestamp}.log format.

3. **File Logging Setup**: Implement file transport using pino.transport() with rotation capabilities. Use pino-roll or similar for log rotation based on size/time. Ensure logs directory exists in config path before writing.

4. **Replace Console Calls**: Search and replace all console.log/warn/error throughout codebase:
   - console.log → logger.info or logger.debug
   - console.warn → logger.warn
   - console.error → logger.error
   - Add contextual information to each log call

5. **Module Integration**: Update all modules to import and use the logger:
   - Server modules (connection manager, router, etc.)
   - Configuration parser
   - Tool discovery engine
   - Health monitoring
   - CLI interface

6. **Transport Mode Support**: Ensure logger works correctly in both stdio and HTTP modes:
   - In stdio mode: Use pino.destination() with stdout
   - In HTTP mode: Consider async logging to prevent blocking
   - Add transport detection logic

7. **TypeScript Types**: Create comprehensive type definitions:
   ```typescript
   interface LoggerConfig {
     level: 'trace' | 'debug' | 'info' | 'warn' | 'error' | 'fatal';
     filePath?: string;
     prettyPrint?: boolean;
     rotation?: RotationConfig;
   }
   ```

8. **Performance Optimization**: Use pino's async mode for file logging. Implement log buffering for high-throughput scenarios. Add configuration for sync vs async logging based on environment.

9. **Error Handling**: Ensure logger gracefully handles file system errors, permission issues, and disk space problems. Implement fallback to console if file logging fails.

10. **Logger Context**: Add request ID tracking for correlated logs. Include server/module context in structured logs. Support child loggers for component-specific logging.

# Test Strategy:
1. **Unit Tests**: Test logger initialization with various configurations. Verify log level filtering works correctly. Test file path generation and rotation logic.

2. **Integration Tests**: Verify logger works in both stdio and HTTP transport modes. Test file writing and rotation functionality. Ensure proper error handling when file system fails.

3. **Replacement Verification**: Use grep/search to ensure no console.log/warn/error calls remain. Verify all modules properly import and use the logger. Check that contextual information is included in logs.

4. **Performance Tests**: Benchmark logging performance vs console.log. Test async logging doesn't block main thread. Verify log rotation doesn't impact performance.

5. **Transport Mode Tests**: Test logger behavior in stdio mode (output to stdout). Test logger in HTTP mode with async operations. Verify logs are properly formatted for each transport.

6. **Error Scenario Tests**: Test behavior when log directory is not writable. Verify fallback mechanisms work correctly. Test recovery from file system errors.
